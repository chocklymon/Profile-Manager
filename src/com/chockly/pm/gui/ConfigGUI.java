/*
 * Copyright (C) 2012 Curtis Oakley
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.chockly.pm.gui;

import com.chockly.pm.Config;
import com.chockly.pm.games.Game;
import com.chockly.pm.games.GameFactory;
import javax.swing.event.DocumentEvent;

/**
 * Shows a configuration dialog for the Profile Manager.
 * @author Curtis Oakley
 */
public class ConfigGUI extends javax.swing.JDialog implements java.awt.event.ActionListener {

    /** Creates new form ConfigGUI */
    public ConfigGUI(java.awt.Frame parent) {
        super(parent, false);
        initComponents();

        // Generate the tabs
        buildTabs();
        
        // Set the default state of the radio buttons
        if(Config.get(Config.DB_CLICK_ICON_KEY, Config.DB_CLICK_ACTIVATE).equals(Config.DB_CLICK_ACTIVATE))
            iconActivatesRB.setSelected(true);
        else
            iconStartsRB.setSelected(true);
        
        String textAction = Config.get(Config.DB_CLICK_TEXT_KEY, Config.DB_CLICK_RENAME);
        
        if(textAction.equals(Config.DB_CLICK_ACTIVATE))
            nameActivatesRB.setSelected(true);
        else if(textAction.equals(Config.DB_CLICK_LAUNCH))
            nameStartsRB.setSelected(true);
        else
            nameEditsRB.setSelected(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        gameSettingPanel = new javax.swing.JPanel();
        dataDirLabel = new javax.swing.JLabel();
        dataDirTxt = new javax.swing.JTextField();
        findDataDirFolderBtn = new javax.swing.JButton();
        exeFileLabel = new javax.swing.JLabel();
        exeFileTxt = new javax.swing.JTextField();
        findExeFileBtn = new javax.swing.JButton();
        startInThisTabCB = new javax.swing.JCheckBox();
        iconActionBG = new javax.swing.ButtonGroup();
        nameActionBG = new javax.swing.ButtonGroup();
        gamesPanel = new javax.swing.JPanel();
        gamesScrollPane = new javax.swing.JScrollPane();
        gameList = new javax.swing.JList();
        moveGameUpBtn = new javax.swing.JButton();
        moveGameDownBtn = new javax.swing.JButton();
        settingsPanel = new javax.swing.JPanel();
        exitOnLaunchCB = new javax.swing.JCheckBox();
        startInLastTabCB = new javax.swing.JCheckBox();
        iconDBLabel = new javax.swing.JLabel();
        iconActivatesRB = new javax.swing.JRadioButton();
        iconStartsRB = new javax.swing.JRadioButton();
        nameDBLabel = new javax.swing.JLabel();
        nameEditsRB = new javax.swing.JRadioButton();
        nameActivatesRB = new javax.swing.JRadioButton();
        nameStartsRB = new javax.swing.JRadioButton();
        gameSettingsTabPane = new javax.swing.JTabbedPane();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        applyBtn = new javax.swing.JButton();

        dataDirLabel.setText("Data Dir:");

        dataDirTxt.getDocument().addDocumentListener(new ConfigTextChangeListener(false));

        findDataDirFolderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/blue-folder-search-result.png"))); // NOI18N
        findDataDirFolderBtn.addActionListener(this);

        exeFileLabel.setText("Exe:");

        exeFileTxt.getDocument().addDocumentListener(new ConfigTextChangeListener(true));

        findExeFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/blue-folder-search-result.png"))); // NOI18N
        findExeFileBtn.addActionListener(this);

        startInThisTabCB.setText("Start in this tab");
        startInThisTabCB.setEnabled( !Boolean.parseBoolean( Config.get(Config.START_IN_LAST_TAB, "true") ));
        startInThisTabCB.addActionListener(this);

        javax.swing.GroupLayout gameSettingPanelLayout = new javax.swing.GroupLayout(gameSettingPanel);
        gameSettingPanel.setLayout(gameSettingPanelLayout);
        gameSettingPanelLayout.setHorizontalGroup(
            gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameSettingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gameSettingPanelLayout.createSequentialGroup()
                        .addGroup(gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dataDirLabel)
                            .addComponent(exeFileLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exeFileTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(dataDirTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(findDataDirFolderBtn)
                            .addComponent(findExeFileBtn)))
                    .addComponent(startInThisTabCB))
                .addContainerGap())
        );
        gameSettingPanelLayout.setVerticalGroup(
            gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gameSettingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataDirLabel)
                    .addComponent(dataDirTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findDataDirFolderBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gameSettingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exeFileLabel)
                    .addComponent(exeFileTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findExeFileBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startInThisTabCB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Profile Manager Preferences");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/gear.png")).getImage());
        setLocationByPlatform(true);
        setModal(true);

        gamesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Games", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        gamesPanel.setLayout(new java.awt.GridBagLayout());

        populateGameList();
        gameList.setModel(gameModel);
        gameList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        gameList.setCellRenderer(new GameListRenderer());
        gameList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gameListMouseClicked(evt);
            }
        });
        gameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                gameListValueChanged(evt);
            }
        });
        gamesScrollPane.setViewportView(gameList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 3, 4);
        gamesPanel.add(gamesScrollPane, gridBagConstraints);

        moveGameUpBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/control-090.png"))); // NOI18N
        moveGameUpBtn.setEnabled(false);
        moveGameUpBtn.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weighty = 1.0;
        gamesPanel.add(moveGameUpBtn, gridBagConstraints);

        moveGameDownBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/control-270.png"))); // NOI18N
        moveGameDownBtn.setEnabled(false);
        moveGameDownBtn.addActionListener(this);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 5, 0);
        gamesPanel.add(moveGameDownBtn, gridBagConstraints);

        settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Settings", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        exitOnLaunchCB.setSelected(Boolean.parseBoolean( Config.get(Config.EXIT_ON_LAUNCH, "true") ));
        exitOnLaunchCB.setText("Close on game launch");
        exitOnLaunchCB.addActionListener(this);

        startInLastTabCB.setSelected(Boolean.parseBoolean( Config.get(Config.START_IN_LAST_TAB, "true") ));
        startInLastTabCB.setText("Start up in last tab");
        startInLastTabCB.addActionListener(this);

        iconDBLabel.setText("Double click on profile icon:");

        iconActionBG.add(iconActivatesRB);
        iconActivatesRB.setText("Activates profile");
        iconActivatesRB.addActionListener(this);

        iconActionBG.add(iconStartsRB);
        iconStartsRB.setText("Launches game");
        iconStartsRB.addActionListener(this);

        nameDBLabel.setText("Double click on profile name:");

        nameActionBG.add(nameEditsRB);
        nameEditsRB.setText("Renames Profile");
        nameEditsRB.addActionListener(this);

        nameActionBG.add(nameActivatesRB);
        nameActivatesRB.setText("Activates Profile");
        nameActivatesRB.addActionListener(this);

        nameActionBG.add(nameStartsRB);
        nameStartsRB.setText("Launches Game");
        nameStartsRB.addActionListener(this);

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitOnLaunchCB)
                    .addComponent(startInLastTabCB)
                    .addComponent(iconDBLabel)
                    .addComponent(iconActivatesRB)
                    .addComponent(iconStartsRB)
                    .addComponent(nameEditsRB)
                    .addComponent(nameDBLabel)
                    .addComponent(nameActivatesRB)
                    .addComponent(nameStartsRB))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addComponent(exitOnLaunchCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startInLastTabCB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(iconDBLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconActivatesRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iconStartsRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(nameDBLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameEditsRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameActivatesRB)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameStartsRB)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gameSettingsTabPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        gameSettingsTabPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gameSettingsTabPaneStateChanged(evt);
            }
        });

        saveBtn.setText("Ok");
        saveBtn.addActionListener(this);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(this);

        applyBtn.setText("Apply");
        applyBtn.setToolTipText("Apply Changes");
        applyBtn.setEnabled(false);
        applyBtn.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(gameSettingsTabPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(gamesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gamesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameSettingsTabPane, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyBtn)
                    .addComponent(cancelBtn)
                    .addComponent(saveBtn))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gameListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gameListMouseClicked
        // Get the selected game list item
        int index = gameList.locationToIndex(evt.getPoint());
        
        GameListItem item = (GameListItem) gameModel.get(index); 
        
        // See if the selected state should be fired
        if(evt.getClickCount() >= 2 || evt.getX() < 17){
            // Enable the apply button because something's state has changed
            if( !applyBtn.isEnabled())
                applyBtn.setEnabled(true);
            
            // Toggle selected state
            boolean selected = ! item.isSelected();
            item.setSelected(selected);
            
            // Re-build the active games array
            int len = gameModel.size(), activeCount = 0;
            activeGames = new byte[len];
            for(int i=0; i<len; i++){
                item = (GameListItem) gameModel.get(i);
                if(item.isSelected()){
                    activeGames[activeCount] = item.getID();
                    activeCount++;
                }
            }
            activeGames = java.util.Arrays.copyOf(activeGames, activeCount);
            
            // Save the active games array in the prefs
            prefs.put(Config.ACTIVE_TABS, implode(activeGames));
            
            // Enable/Disable tabs as needed
            if(selected != gameSettingsTabPane.isEnabledAt(index))
                gameSettingsTabPane.setEnabledAt(index, selected);

            // Repaint cell
            gameList.repaint(gameList.getCellBounds(index, index));
        }
    }//GEN-LAST:event_gameListMouseClicked

    private void gameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_gameListValueChanged
        int index = gameList.getSelectedIndex();
        
        moveGameUpBtn.setEnabled(index > 0);
        moveGameDownBtn.setEnabled(index < gameModel.getSize()-1);
    }//GEN-LAST:event_gameListValueChanged

    private void gameSettingsTabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gameSettingsTabPaneStateChanged
        int newSelectedTab = gameSettingsTabPane.getSelectedIndex();

        if(newSelectedTab != -1 && selectedTab < gameSettingsTabPane.getTabCount()){
            // Switch out the tab components
            gameSettingsTabPane.setComponentAt(selectedTab, emptyPanels[selectedTab]);
            gameSettingsTabPane.setComponentAt(newSelectedTab, gameSettingPanel);

            // Check the start in this tab checkbox.
            if( !startInLastTabCB.isSelected()){
                String sTab = prefs.get(Config.START_TAB);
                if(sTab == null)
                    startInThisTabCB.setSelected(
                            games[newSelectedTab] == Byte.parseByte(Config.get(Config.START_TAB,"0")));
                else
                    startInThisTabCB.setSelected(
                            games[newSelectedTab] == Byte.parseByte(sTab));
            }
            
            // Save the value of the newly selected tab
            selectedTab = newSelectedTab;

            // Populate the text fields
            Game g = GameFactory.getGameFromID(games[newSelectedTab]);
            
            String dir = prefs.get(g.getDataDirKey());
            String exe = prefs.get(g.getExeConfigKey());
            
            if(dir == null)
                dir = g.getDir();
            
            if(exe == null)
                exe = g.getExePath();
            
            // Mark these change to the text field as being by the program not the user
            programaticDocChange = true;
            
            // Update the text fields text
            dataDirTxt.setText(dir);
            exeFileTxt.setText(exe);
            
            // Clear the programtic text change field
            programaticDocChange = false;
        }
    }//GEN-LAST:event_gameSettingsTabPaneStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel dataDirLabel;
    private javax.swing.JTextField dataDirTxt;
    private javax.swing.JLabel exeFileLabel;
    private javax.swing.JTextField exeFileTxt;
    private javax.swing.JCheckBox exitOnLaunchCB;
    private javax.swing.JButton findDataDirFolderBtn;
    private javax.swing.JButton findExeFileBtn;
    private javax.swing.JList gameList;
    private javax.swing.JPanel gameSettingPanel;
    private javax.swing.JTabbedPane gameSettingsTabPane;
    private javax.swing.JPanel gamesPanel;
    private javax.swing.JScrollPane gamesScrollPane;
    private javax.swing.ButtonGroup iconActionBG;
    private javax.swing.JRadioButton iconActivatesRB;
    private javax.swing.JLabel iconDBLabel;
    private javax.swing.JRadioButton iconStartsRB;
    private javax.swing.JButton moveGameDownBtn;
    private javax.swing.JButton moveGameUpBtn;
    private javax.swing.ButtonGroup nameActionBG;
    private javax.swing.JRadioButton nameActivatesRB;
    private javax.swing.JLabel nameDBLabel;
    private javax.swing.JRadioButton nameEditsRB;
    private javax.swing.JRadioButton nameStartsRB;
    private javax.swing.JButton saveBtn;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JCheckBox startInLastTabCB;
    private javax.swing.JCheckBox startInThisTabCB;
    // End of variables declaration//GEN-END:variables

    private javax.swing.DefaultListModel gameModel = new javax.swing.DefaultListModel();
    private javax.swing.JPanel[] emptyPanels;
    
    private java.util.HashMap<String, String> prefs = new java.util.HashMap<String, String>();

    private int selectedTab;
    private byte[] activeGames;
    private byte[] games;
    
    private boolean programaticDocChange = false;
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        // Send the action to the correct method
        Object source = evt.getSource();
        if(source.equals(applyBtn)){
            // Apply the changes
            saveConfig();
            applyBtn.setEnabled(false);
        } else if(source.equals(cancelBtn)){
            // Exit
            this.dispose();
        } else if(source.equals(saveBtn)){
            // Save and Exit
            saveConfig();
            this.dispose();
        } else {
            // Enable the apply button because something's state has changed
            if( !applyBtn.isEnabled())
                applyBtn.setEnabled(true);
            
            if(source.equals(exitOnLaunchCB)){
                // Save the exit on launch state
                prefs.put(Config.EXIT_ON_LAUNCH, Boolean.toString(exitOnLaunchCB.isSelected()));
            } else if(source.equals(findDataDirFolderBtn)){
                findFile(false);
            } else if(source.equals(findExeFileBtn)){
                findFile(true);
            } else if(source.equals(moveGameDownBtn)){
                moveGameDown();
            } else if(source.equals(moveGameUpBtn)){
                moveGameUp();
            } else if(source.equals(startInLastTabCB)){
                setStartInLastTab();
            } else if(source.equals(startInThisTabCB)){
                setStartInThisTab();
            } else if(source.equals(iconActivatesRB)){
                prefs.put(Config.DB_CLICK_ICON_KEY, Config.DB_CLICK_ACTIVATE);
            } else if(source.equals(iconStartsRB)){
                prefs.put(Config.DB_CLICK_ICON_KEY, Config.DB_CLICK_LAUNCH);
            } else if(source.equals(nameEditsRB)){
                prefs.put(Config.DB_CLICK_TEXT_KEY, Config.DB_CLICK_RENAME);
            } else if(source.equals(nameActivatesRB)){
                prefs.put(Config.DB_CLICK_TEXT_KEY, Config.DB_CLICK_ACTIVATE);
            } else if(source.equals(nameStartsRB)){
                prefs.put(Config.DB_CLICK_TEXT_KEY, Config.DB_CLICK_LAUNCH);
            }
        }
    }
    
    private void buildTabs(){
        if(emptyPanels == null){
            emptyPanels = new javax.swing.JPanel[games.length];
            for(int x=0; x<games.length; x++){
                emptyPanels[x] = new javax.swing.JPanel();
            }
        } else {
            gameSettingsTabPane.removeAll();
        }
            
        for(int x=0; x<games.length; x++){
            
            Game g = GameFactory.getGameFromID(games[x]);
            gameSettingsTabPane.addTab(g.getName(), g.getIcon(), emptyPanels[x], "Manage settings for " + g.getFullName());
            
            if(getIndex(activeGames, games[x]) == -1)
                gameSettingsTabPane.setEnabledAt(x, false);
        }
        
        gameSettingsTabPane.setSelectedIndex(selectedTab);
    }
    
    private void findFile(boolean isExe){
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
        
        fc.setApproveButtonText("Set");
        
        Game g = GameFactory.getGameFromID(games[selectedTab]);
        
        if(isExe){
            fc.setFileFilter(new ExeFileFilter());
            fc.setAcceptAllFileFilterUsed(false);
            fc.setDialogTitle("Select the " +  g.getName() + " launch executable");
            fc.setCurrentDirectory(new java.io.File(g.getExePath()));
        } else {
            fc.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
            fc.setDialogTitle("Select the " + g.getName() + " game data folder");
            fc.setCurrentDirectory(new java.io.File(g.getDir()));
        }
        
        int result = fc.showOpenDialog(this);
        if (result == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            String path = fc.getSelectedFile().getAbsolutePath();
            
            if(isExe){
                exeFileTxt.setText(path);
            } else {
                path += java.io.File.separator;
                dataDirTxt.setText(path);
            }
        }
    }

    /**
     * Finds the the first index of a byte in a byte array, or -1 if not found.
     * @param search The byte array to search.
     * @param find The byte to search for, can also accept ints.
     * @return The first index of the byte, or -1.
     */
    private int getIndex(byte[] search, int find){
        for(int x=0; x<search.length; x++){
            if(search[x] == find)
                return x;
        }
        return -1;
    }
    
    private String implode(byte[] a){
        if (a == null)
            return "";
	int iMax = a.length - 1;
	if (iMax == -1)
            return "";

        StringBuilder sb = new StringBuilder();
        for (int i = 0; ; i++) {
            sb.append(a[i]);
            
	    if (i == iMax)
		return sb.toString();
            
            sb.append(",");
        }
    }

    private void moveGameUp(){
        int index = gameList.getSelectedIndex();
        
        if(index > 0){
            
            byte movedGameId = games[index-1];
            
            // Update the active games array
            if(getIndex(activeGames, games[index]) != -1){
                int movedGameIndex = getIndex(activeGames, movedGameId);

                if(movedGameIndex != -1 && movedGameIndex < activeGames.length-1){
                    activeGames[movedGameIndex] = activeGames[movedGameIndex+1];
                    activeGames[movedGameIndex+1] = movedGameId;

                    prefs.put(Config.ACTIVE_TABS, implode(activeGames));
                }
            }

            // Update the games array
            games[index-1] = games[index];
            games[index] = movedGameId;

            // Update the gameList
            Object tempObj = gameModel.get(index-1);
            gameModel.set(index-1, gameModel.get(index));
            gameModel.set(index, tempObj);
            
            gameList.setSelectedIndex(index-1);
            
            // Rebuild the tabs
            if(selectedTab == index)
                selectedTab--;
            else if(selectedTab == index-1)
                selectedTab++;
            
            buildTabs();
        }
    }
    
    private void moveGameDown(){
        final int index = gameList.getSelectedIndex();
        
        if(index < gameModel.getSize()){
            
            byte movedGameId = games[index+1];
            
            // Update the active games array
            if(getIndex(activeGames, games[index]) != -1){// Only run when the game being moved is active
                int movedGameIndex = getIndex(activeGames, movedGameId);

                // Make sure that the movedGameID is not the first active game
                if(movedGameIndex > 0){
                    activeGames[movedGameIndex] = activeGames[movedGameIndex-1];
                    activeGames[movedGameIndex-1] = movedGameId;

                    prefs.put(Config.ACTIVE_TABS, implode(activeGames));
                }
            }
            
            games[index+1] = games[index];
            games[index] = movedGameId;
            
            Object tempObj = gameModel.get(index+1);
            gameModel.set(index+1, gameModel.get(index));
            gameModel.set(index, tempObj);
            
            gameList.setSelectedIndex(index+1);
            
            // Rebuild the tabs
            if(selectedTab == index)
                selectedTab++;
            else if(selectedTab == index+1)
                selectedTab--;
            
            buildTabs();
        }
    }

    /** Populates the gameList JList with all the games. */
    private void populateGameList(){
        // Get the active and all game information
        byte[] allGames = GameFactory.getAllGameIds();
        activeGames = GameFactory.getActiveGameIds();
        
        int activeGameCount = activeGames.length;
        if(activeGameCount == allGames.length){
            games = java.util.Arrays.copyOf(activeGames, activeGameCount);
        } else {
            // Add activeGames to all games then add in any games left over.
            games = new byte[allGames.length];
            System.arraycopy(activeGames, 0, games, 0, activeGameCount);
            
            for(int x=0, added = activeGameCount; x<games.length; x++){
                if(getIndex(games, allGames[x]) == -1){
                    games[added] = allGames[x];
                    added++;
                }
            }
        }
        
        // Setup the list model
        for(int x=0; x<games.length; x++){
            // Create and set the gameList Item
            GameListItem game = new GameListItem(
                    GameFactory.getNameFromID(games[x]), games[x]);
            if(x < activeGameCount)
                game.setSelected(true);
            
            // Add to the model
            gameModel.addElement(game);
        }
    }

    private void saveConfig() {
        // Iterate through the prefs and save to config
        java.util.Iterator<String> i = prefs.keySet().iterator();
        while(i.hasNext()){
            String key = i.next();
            Config.set(key, prefs.get(key));
        }
        Config.saveConfig();
    }
    
    private void setStartInLastTab() {
        // Save the start in last tab value
        boolean startInLastTab = startInLastTabCB.isSelected();
        prefs.put(Config.START_IN_LAST_TAB, Boolean.toString(startInLastTab));
        
        // Change the startInThisTabs state
        if(startInLastTab){
            if(startInThisTabCB.isEnabled())
                startInThisTabCB.setEnabled(false);
            
            if(startInThisTabCB.isSelected())
                startInThisTabCB.setSelected(false);
        } else {
            if( !startInThisTabCB.isEnabled())
                startInThisTabCB.setEnabled(true);
        }
    }
    
    private void setStartInThisTab(){
        if(startInThisTabCB.isSelected()){
            prefs.put(Config.START_TAB, Byte.toString(games[selectedTab]));
            prefs.put(Config.START_IN_LAST_TAB, "false");
        } else {
            prefs.put(Config.START_TAB, "0");
        }
    }
    
    private class ConfigTextChangeListener implements javax.swing.event.DocumentListener {

        private final boolean isExe;
        
        private ConfigTextChangeListener(boolean isExe){
            this.isExe = isExe;
        }
        
        private void updatePrefs(){
            // Do not respond to programatic changes (such as those caused by changing tabs).
            if(programaticDocChange)
                return;
            
            // Get the new text field value
            String newValue = isExe ? exeFileTxt.getText() : dataDirTxt.getText();
            
            if(newValue == null || newValue.isEmpty())
                return;
            
            // Get the config key and previous value
            Game g = GameFactory.getGameFromID(games[selectedTab]);
            String prefsKey = isExe ? g.getExeConfigKey() : g.getDataDirKey();
            String value = prefs.containsKey(prefsKey) ? prefs.get(prefsKey) : Config.get(prefsKey);
            
            if(value == null || !value.equals(newValue)){
                // Value has changed, update the value
                if( !applyBtn.isEnabled())
                    applyBtn.setEnabled(true);
                
                prefs.put(prefsKey, newValue);
            }
        }
        
        @Override
        public void insertUpdate(DocumentEvent e) {
            updatePrefs();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updatePrefs();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            // Ignore
        }
        
    }
    
}
