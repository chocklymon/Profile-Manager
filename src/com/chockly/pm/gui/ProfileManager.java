/* Profile Manager
 * Copyright (C) 2012 Curtis Oakley
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.chockly.pm.gui;

import com.chockly.pm.*;
import com.chockly.pm.games.CustomGame;
import com.chockly.pm.games.Game;
import com.chockly.pm.games.GameFactory;
import java.beans.PropertyChangeEvent;
import java.io.File;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Creates a GUI for interacting with the Profiles and Games of the Profile
 * Manger.
 * @author Curtis Oakley
 */
public class ProfileManager extends javax.swing.JFrame implements java.awt.event.ActionListener {

    /** Creates new Profile Manager GUI */
    public ProfileManager(byte gameId) {
        // CUSTOM CODE
        this.gameID = gameId;
        pf = ProfileFactory.getInstance();
        profileListModel = new javax.swing.DefaultListModel();
        // END CUSTOM CODE
        
        initComponents();

        // CUSTOM CODE
        // Set the GUI's size and location
        int height = Integer.parseInt(Config.getPrivateProperty(Config.GUI_HEIGHT, "-1"));
        int width = Integer.parseInt(Config.getPrivateProperty(Config.GUI_WIDTH, "-1"));
        int xLoc = Integer.parseInt(Config.getPrivateProperty(Config.GUI_X_LOCATION, "-1"));
        int yLoc = Integer.parseInt(Config.getPrivateProperty(Config.GUI_Y_LOCATION, "-1"));
        
        if(height != -1 && width != -1)
            this.setSize(width, height);
        
        if(xLoc == -1 || yLoc == -1)
            this.setLocationByPlatform(true);
        else 
            this.setLocation(xLoc, yLoc);
        
        // Set the frames iconImages
        java.util.List<java.awt.Image> iconImages = new java.util.ArrayList<java.awt.Image>(2);
        
        iconImages.add(new ImageIcon(getClass().getResource("/com/chockly/pm/resources/mask.png")).getImage());
        iconImages.add(new ImageIcon(getClass().getResource("/com/chockly/pm/resources/pm_icon_32.png")).getImage());
        
        setIconImages(iconImages);
        
        // Create the default profile icon
        defaultProfileIcon = new ImageIcon("profiles/default.png");

        // Create the game tabs
        buildTabs();
        
        // Set the selected tab
        for(int x=0; x<activeGames.length; x++){
            if(activeGames[x] == gameId){
                tabPane.setSelectedIndex(x);
                break;
            }
        }
        
        // Set the double click actions
        setDoubleClickActions();
        
        // END CUSTOM CODE
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        profileListScrollPane = new javax.swing.JScrollPane();
        profileList = new javax.swing.JList();
        launchGameBtn = new javax.swing.JButton();
        profileImage = new javax.swing.JLabel();
        infoTxt = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        popupTextField = new javax.swing.JTextField();
        profilePopupMenu = new javax.swing.JPopupMenu();
        activateProfilePopupMenuItem = new javax.swing.JMenuItem();
        renameProfileMenuItem = new javax.swing.JMenuItem();
        chngeImgPopupMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        makeShortcutPopupMenuItem = new javax.swing.JMenuItem();
        backupProfilePopupMenuItem = new javax.swing.JMenuItem();
        separator4 = new javax.swing.JPopupMenu.Separator();
        deleteProfilePopupMenuItem = new javax.swing.JMenuItem();
        tabPane = new javax.swing.JTabbedPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newProfileMenuItem = new javax.swing.JMenuItem();
        autoProfileMenuItem = new javax.swing.JMenuItem();
        launchMenuItem = new javax.swing.JMenuItem();
        separator1 = new javax.swing.JSeparator();
        prefMenuItem = new javax.swing.JMenuItem();
        separator2 = new javax.swing.JSeparator();
        exitMenuItem = new javax.swing.JMenuItem();
        profileMenu = new javax.swing.JMenu();
        activateProfileMenuItem = new javax.swing.JMenuItem();
        editProfileMenuItem = new javax.swing.JMenuItem();
        chngeImgMenuItem = new javax.swing.JMenuItem();
        makeShortcutMenuItem = new javax.swing.JMenuItem();
        separator3 = new javax.swing.JSeparator();
        deleteProfileMenuItem = new javax.swing.JMenuItem();
        customGameMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        editGameMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exportGameMenuItem = new javax.swing.JMenuItem();
        importGameMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        deleteGameMenuItem = new javax.swing.JMenuItem();
        toolsMenu = new javax.swing.JMenu();
        deactivateMenuItem = new javax.swing.JMenuItem();
        backupProfileMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        exportProfilesMenuItem = new javax.swing.JMenuItem();
        importProfileMenuItem = new javax.swing.JMenuItem();
        separator5 = new javax.swing.JPopupMenu.Separator();
        uninstallMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        helpMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        profileList.setModel(profileListModel);
        profileList.setCellRenderer(new ProfileListRenderer());
        profileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                profileListMouseClicked(evt);
            }
        });
        profileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                profileListValueChanged(evt);
            }
        });
        profileListScrollPane.setViewportView(profileList);

        launchGameBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/arrow.png"))); // NOI18N
        launchGameBtn.setText("Launch Oblivion");
        launchGameBtn.setEnabled(false);
        launchGameBtn.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        launchGameBtn.addActionListener(this);

        profileImage.setBackground(new java.awt.Color(255, 255, 255));
        profileImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        profileImage.setFocusable(false);

        infoTxt.setText(" ");

        progressBar.setVisible(false);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profileListScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(infoTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(launchGameBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(profileImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(launchGameBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(profileImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(infoTxt, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(profileListScrollPane, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        popupTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                popupTextFieldFocusLost(evt);
            }
        });
        popupTextField.addActionListener(this);

        activateProfilePopupMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/tick.png"))); // NOI18N
        activateProfilePopupMenuItem.setText("Activate");
        activateProfilePopupMenuItem.addActionListener(this);
        profilePopupMenu.add(activateProfilePopupMenuItem);

        renameProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/pencil.png"))); // NOI18N
        renameProfileMenuItem.setText("Rename");
        renameProfileMenuItem.addActionListener(this);
        profilePopupMenu.add(renameProfileMenuItem);

        chngeImgPopupMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/image--pencil.png"))); // NOI18N
        chngeImgPopupMenuItem.setText("Change Image");
        chngeImgPopupMenuItem.addActionListener(this);
        profilePopupMenu.add(chngeImgPopupMenuItem);
        profilePopupMenu.add(jSeparator4);

        makeShortcutPopupMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/chain--plus.png"))); // NOI18N
        makeShortcutPopupMenuItem.setText("Create Shortcut");
        makeShortcutPopupMenuItem.addActionListener(this);
        profilePopupMenu.add(makeShortcutPopupMenuItem);

        backupProfilePopupMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/vise-drawer.png"))); // NOI18N
        backupProfilePopupMenuItem.setText("Backup");
        backupProfilePopupMenuItem.addActionListener(this);
        profilePopupMenu.add(backupProfilePopupMenuItem);
        profilePopupMenu.add(separator4);

        deleteProfilePopupMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/cross-script.png"))); // NOI18N
        deleteProfilePopupMenuItem.setText("Delete");
        deleteProfilePopupMenuItem.addActionListener(this);
        profilePopupMenu.add(deleteProfilePopupMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Profile Manager");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPaneStateChanged(evt);
            }
        });

        fileMenu.setText("File");

        newProfileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/plus.png"))); // NOI18N
        newProfileMenuItem.setText("New Profile");
        newProfileMenuItem.addActionListener(this);
        fileMenu.add(newProfileMenuItem);

        autoProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/wand--plus.png"))); // NOI18N
        autoProfileMenuItem.setText("Auto Create Profiles");
        autoProfileMenuItem.addActionListener(this);
        fileMenu.add(autoProfileMenuItem);

        launchMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        launchMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/application--arrow.png"))); // NOI18N
        launchMenuItem.setText("Launch Game");
        launchMenuItem.setEnabled(false);
        launchMenuItem.addActionListener(this);
        fileMenu.add(launchMenuItem);
        fileMenu.add(separator1);

        prefMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/gear--pencil.png"))); // NOI18N
        prefMenuItem.setText("Settings");
        prefMenuItem.addActionListener(this);
        fileMenu.add(prefMenuItem);
        fileMenu.add(separator2);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/control-power.png"))); // NOI18N
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(this);
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        profileMenu.setText("Profile");

        activateProfileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
        activateProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/tick.png"))); // NOI18N
        activateProfileMenuItem.setText("Activate Profile");
        activateProfileMenuItem.setEnabled(false);
        activateProfileMenuItem.addActionListener(this);
        profileMenu.add(activateProfileMenuItem);

        editProfileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        editProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/pencil.png"))); // NOI18N
        editProfileMenuItem.setText("Edit Profile");
        editProfileMenuItem.setEnabled(false);
        editProfileMenuItem.addActionListener(this);
        profileMenu.add(editProfileMenuItem);

        chngeImgMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/image--pencil.png"))); // NOI18N
        chngeImgMenuItem.setText("Change Image");
        chngeImgMenuItem.setEnabled(false);
        chngeImgMenuItem.addActionListener(this);
        profileMenu.add(chngeImgMenuItem);

        makeShortcutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/chain--plus.png"))); // NOI18N
        makeShortcutMenuItem.setText("Create Shortcut");
        makeShortcutMenuItem.setEnabled(false);
        makeShortcutMenuItem.addActionListener(this);
        profileMenu.add(makeShortcutMenuItem);
        profileMenu.add(separator3);

        deleteProfileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        deleteProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/cross-script.png"))); // NOI18N
        deleteProfileMenuItem.setText("Delete Profile");
        deleteProfileMenuItem.setEnabled(false);
        deleteProfileMenuItem.addActionListener(this);
        profileMenu.add(deleteProfileMenuItem);

        menuBar.add(profileMenu);

        customGameMenu.setText("Games");

        newGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/plus.png"))); // NOI18N
        newGameMenuItem.setText("New Custom Game");
        newGameMenuItem.addActionListener(this);
        customGameMenu.add(newGameMenuItem);

        editGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/pencil.png"))); // NOI18N
        editGameMenuItem.setText("Edit Game");
        editGameMenuItem.setEnabled(false);
        editGameMenuItem.addActionListener(this);
        customGameMenu.add(editGameMenuItem);
        customGameMenu.add(jSeparator1);

        exportGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/script-export.png"))); // NOI18N
        exportGameMenuItem.setText("Export Game");
        exportGameMenuItem.setEnabled(false);
        exportGameMenuItem.addActionListener(this);
        customGameMenu.add(exportGameMenuItem);

        importGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/script-import.png"))); // NOI18N
        importGameMenuItem.setText("Import Game");
        importGameMenuItem.addActionListener(this);
        customGameMenu.add(importGameMenuItem);
        customGameMenu.add(jSeparator2);

        deleteGameMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/cross-script.png"))); // NOI18N
        deleteGameMenuItem.setText("Delete Game");
        deleteGameMenuItem.setEnabled(false);
        deleteGameMenuItem.addActionListener(this);
        customGameMenu.add(deleteGameMenuItem);

        menuBar.add(customGameMenu);

        toolsMenu.setText("Tools");

        deactivateMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/tick-red.png"))); // NOI18N
        deactivateMenuItem.setText("Deactivate Profiles");
        deactivateMenuItem.addActionListener(this);
        toolsMenu.add(deactivateMenuItem);

        backupProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/vise-drawer.png"))); // NOI18N
        backupProfileMenuItem.setText("Backup Profile");
        backupProfileMenuItem.setEnabled(false);
        backupProfileMenuItem.addActionListener(this);
        toolsMenu.add(backupProfileMenuItem);
        toolsMenu.add(jSeparator3);

        exportProfilesMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/card-export.png"))); // NOI18N
        exportProfilesMenuItem.setText("Export Profiles");
        exportProfilesMenuItem.setEnabled(false);
        exportProfilesMenuItem.addActionListener(this);
        toolsMenu.add(exportProfilesMenuItem);

        importProfileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/card-import.png"))); // NOI18N
        importProfileMenuItem.setText("Import Profiles");
        importProfileMenuItem.addActionListener(this);
        toolsMenu.add(importProfileMenuItem);
        toolsMenu.add(separator5);

        uninstallMenuItem.setText("Uninstall");
        uninstallMenuItem.addActionListener(this);
        toolsMenu.add(uninstallMenuItem);

        menuBar.add(toolsMenu);

        helpMenu.setText("Help");

        helpMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        helpMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/question.png"))); // NOI18N
        helpMenuItem.setText("Help");
        helpMenuItem.addActionListener(this);
        helpMenu.add(helpMenuItem);

        aboutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, java.awt.event.InputEvent.ALT_MASK));
        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/information-white.png"))); // NOI18N
        aboutMenuItem.setMnemonic('A');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(this);
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tabPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPaneStateChanged
        // Get the current tab index number
        int currentTab = tabPane.getSelectedIndex();

        if(currentTab != -1 && previousTab < tabPane.getTabCount()){
            // Clear the infoTxt as needed
            if( !infoTxt.getText().isEmpty())
                infoTxt.setText("");
            
            // Switch out the tab components
            tabPane.setComponentAt(previousTab, emptyPanels[previousTab]);
            tabPane.setComponentAt(currentTab, mainPanel);

            gameID = activeGames[currentTab];
            launchGameBtn.setText("Launch " + tabPane.getTitleAt(currentTab));
            
            previousTab = currentTab;

            // Check the game for profile changes
            checkForProfileDirChanges();
            
            updateProfileList();

            // Check if button and menu items need to be changed
            if(profileList.getSelectedIndex() == -1)
                setProfileIsSelected(false);
            
            setCustomGame(GameFactory.isCustomGame(gameID));
        }
    }//GEN-LAST:event_tabPaneStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exitProgram();
    }//GEN-LAST:event_formWindowClosing

    private void profileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_profileListValueChanged
        // If a profile is selected update the UI
        if(profileList.getSelectedIndex() >= 0)
            setProfileIsSelected(true);
    }//GEN-LAST:event_profileListValueChanged

    private void profileListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_profileListMouseClicked
        // Handles right clicks and double clicks on the Profile List
        if(evt.getClickCount() == 2){
            try {
                if(evt.getX() <= 16){
                    // Clicked on the icon
                    if(dbIconActivates)
                        activateProfile();
                    else
                        launchGame();

                } else {
                    // Clicked on the text

                    if(dbTextAction == 2){
                        launchGame();
                    } else if(dbTextAction == 1){
                        activateProfile();
                    } else {
                        // Rename the profile
                        showRenamePopup();
                    }
                }
            } catch(Exception ex){
                // Log the error and inform the user
                Main.handleException(null, ex, Main.LOG_LEVEL);
                infoTxt.setText("An error has occured.");
            }
        } else if(javax.swing.SwingUtilities.isRightMouseButton(evt)){
            // Set the selected index to the item being righ clicked on
            profileList.setSelectedIndex(
                    profileList.locationToIndex(evt.getPoint()));
            
            // Show the right click menu (Only when something is selected).
            if( !profileList.isSelectionEmpty() )
                profilePopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_profileListMouseClicked

    private void popupTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_popupTextFieldFocusLost
        // Hide the popup as needed
        if(popupOn)
            currentPopup.hide();
    }//GEN-LAST:event_popupTextFieldFocusLost

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem activateProfileMenuItem;
    private javax.swing.JMenuItem activateProfilePopupMenuItem;
    private javax.swing.JMenuItem autoProfileMenuItem;
    private javax.swing.JMenuItem backupProfileMenuItem;
    private javax.swing.JMenuItem backupProfilePopupMenuItem;
    private javax.swing.JMenuItem chngeImgMenuItem;
    private javax.swing.JMenuItem chngeImgPopupMenuItem;
    private javax.swing.JMenu customGameMenu;
    private javax.swing.JMenuItem deactivateMenuItem;
    private javax.swing.JMenuItem deleteGameMenuItem;
    private javax.swing.JMenuItem deleteProfileMenuItem;
    private javax.swing.JMenuItem deleteProfilePopupMenuItem;
    private javax.swing.JMenuItem editGameMenuItem;
    private javax.swing.JMenuItem editProfileMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem exportGameMenuItem;
    private javax.swing.JMenuItem exportProfilesMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem helpMenuItem;
    private javax.swing.JMenuItem importGameMenuItem;
    private javax.swing.JMenuItem importProfileMenuItem;
    private javax.swing.JLabel infoTxt;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JButton launchGameBtn;
    private javax.swing.JMenuItem launchMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuItem makeShortcutMenuItem;
    private javax.swing.JMenuItem makeShortcutPopupMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JMenuItem newProfileMenuItem;
    private javax.swing.JTextField popupTextField;
    private javax.swing.JMenuItem prefMenuItem;
    private javax.swing.JLabel profileImage;
    private javax.swing.JList profileList;
    private javax.swing.JScrollPane profileListScrollPane;
    private javax.swing.JMenu profileMenu;
    private javax.swing.JPopupMenu profilePopupMenu;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JMenuItem renameProfileMenuItem;
    private javax.swing.JSeparator separator1;
    private javax.swing.JSeparator separator2;
    private javax.swing.JSeparator separator3;
    private javax.swing.JPopupMenu.Separator separator4;
    private javax.swing.JPopupMenu.Separator separator5;
    private javax.swing.JTabbedPane tabPane;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JMenuItem uninstallMenuItem;
    // End of variables declaration//GEN-END:variables

    // BEGIN CUSTOM CODE
    private javax.swing.JPanel[] emptyPanels = null;

    private javax.swing.Popup currentPopup;
    private boolean popupOn = false;
    
    private final javax.swing.DefaultListModel profileListModel;
    private final ImageIcon defaultProfileIcon;
    
    private final ProfileFactory pf;
    
    private JFileChooser xmlChooser = null;
    
    private int previousTab = 0;
    private boolean[] tabProfilesChecked = null;
    private byte[] activeGames;
    private byte gameID;
    
    private boolean dbIconActivates;
    private byte dbTextAction;
    
    
    @Override
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        // Clear the infoTxt as needed
        if( !infoTxt.getText().isEmpty())
            infoTxt.setText("");
        
        try {
            // Split out the action events depending on what triggered it.
            Object source = evt.getSource();
            if(source.equals(launchGameBtn) || source.equals(launchMenuItem)){
                // Since launch uses 'L' as an accelerator make sure that this action doens't fire while the user is renaming a profile
                if(!popupOn)
                    launchGame();
            } else if(source.equals(aboutMenuItem)){
                showAboutBox();
            } else if(source.equals(autoProfileMenuItem)){
                autoCreateProfiles();
            } else if(source.equals(editProfileMenuItem)){
                showEditProfile();
            } else if(source.equals(exitMenuItem)){
                exitProgram();
            } else if(source.equals(helpMenuItem)){
                showHelp();
            } else if(source.equals(newProfileMenuItem)){
                createNewProfile();
            } else if(source.equals(prefMenuItem)){
                showConfig();
            } else if(source.equals(popupTextField)){
                renameProfile();
            } else if(source.equals(activateProfileMenuItem) || source.equals(activateProfilePopupMenuItem)){
                activateProfile();
            } else if(source.equals(chngeImgMenuItem) || source.equals(chngeImgPopupMenuItem)){
                changeProfileImage();
            } else if(source.equals(deleteProfileMenuItem) || source.equals(deleteProfilePopupMenuItem)){
                deleteProfile();
            } else if(source.equals(makeShortcutMenuItem) || source.equals(makeShortcutPopupMenuItem)){
                createShortcut();
            } else if(source.equals(renameProfileMenuItem)){
                showRenamePopup();
            } else if(source.equals(deactivateMenuItem)){
                deactivateProfiles();
            } else if(source.equals(backupProfileMenuItem) || source.equals(backupProfilePopupMenuItem)){
                backupProfile();
            } else if(source.equals(uninstallMenuItem)){
                uninstall();
            } else if(source.equals(newGameMenuItem)){
                showEditGame(false);
            } else if(source.equals(editGameMenuItem)){
                showEditGame(true);
            } else if(source.equals(deleteGameMenuItem)){
                deleteCustomGame();
            } else if(source.equals(exportGameMenuItem)){
                exportImport(true, false);
            } else if(source.equals(exportProfilesMenuItem)){
                exportImport(true, true);
            } else if(source.equals(importGameMenuItem)){
                exportImport(false, false);
            } else if(source.equals(importProfileMenuItem)){
                exportImport(false, true);
            }
        } catch(Exception ex){
            // Log the error and inform the user
            Main.handleException(null, ex, Main.LOG_LEVEL);
            infoTxt.setText("An error has occured.");
            
            // Reset the cursor if needed
            if(getCursor().getType() != java.awt.Cursor.DEFAULT_CURSOR)
                setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        }
    }
    
    /** Activates the currently selected profile. */
    private void activateProfile(){
        Profile p = (Profile) profileList.getSelectedValue();
        GameFactory.getGameFromID(gameID).activateProfile( p );
        updateProfileList();
    }
    
    /** Runs the current game's autoSetupProfiles. */
    private void autoCreateProfiles(){
        // Confirm auto create profiles
        if( JOptionPane.showConfirmDialog(this,
                "Are you sure that you want to auto create profiles?",
                "Auto Create Profiles",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
            
            GameFactory.getGameFromID(gameID).autoSetupProfiles();
            
            updateProfileList();
            
            setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        }
    }
    
    /** Creates an archive file of the currently selected profile. */
    private void backupProfile(){
        
        // Update the GUI
        infoTxt.setText("Creating backup...");
        progressBar.setValue(0);
        progressBar.setIndeterminate(false); 
        progressBar.setVisible(true);
        backupProfileMenuItem.setEnabled(false);
        
        ProfileBackup pb = new ProfileBackup((Profile) profileList.getSelectedValue(), this);
        pb.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                progressBarUpdate(evt);
            }
        });
        pb.execute();
    }
    
    /** Initializes the game tabs. */
    private void buildTabs(){
        // Get the active games
        byte[] activeGameIds = GameFactory.getActiveGameIds();
        
        // Only run when the active games has changed
        if(Arrays.equals(activeGameIds, activeGames))
            return;

        // Store the active games
        activeGames = activeGameIds;
        
        // Build/Re-build the empty panels as needed
        if(emptyPanels == null || emptyPanels.length < activeGames.length){
            emptyPanels = new javax.swing.JPanel[activeGames.length];
            
            for(int x=0; x<activeGames.length; x++){
                emptyPanels[x] = new javax.swing.JPanel();
            }
        }
        
        // Initialize the tabs
        tabPane.removeAll();
        Game g;
        
        for(int x=0; x<activeGames.length; x++){
            g = GameFactory.getGameFromID(activeGames[x]);
            
            if(g != null)
                tabPane.addTab(g.getName(),
                        g.getIcon(),
                        emptyPanels[x],
                        "Manage " + g.getFullName() + " Profiles");
        }

        // Set the selected tab as best as possible
        if(previousTab >= tabPane.getTabCount())
            previousTab = tabPane.getTabCount() - 1;
        
        // If there is only one tab the tab change state event doesn't always fire
        // Ensure that in this situation it fires.
        if(tabPane.getTabCount() == 1)
            tabPaneStateChanged( new javax.swing.event.ChangeEvent(new Object()) );
        else
            tabPane.setSelectedIndex(previousTab);
    }
    
    /**
     * Displays the ImageFileChooser to change the currently selected profile's
     * image.
     */ 
    private void changeProfileImage(){
        Profile p = (Profile) profileList.getSelectedValue();
        ImageFileChooser fc = new ImageFileChooser(p.getImage());
        
        int result = fc.showOpenDialog(this);
        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            p.setImage(fc.getSelectedFile().getAbsolutePath());
            profileImage.setIcon(new ImageIcon(p.getImage()));
        }
    }
    
    /**
     * Checks the current tab's profile directory for changes.
     * @return True if profiles where changed.
     */
    private boolean checkForProfileDirChanges(){
        if(tabProfilesChecked != null){
            // Increase the size of the tabProfilesChecked array.
            if(tabProfilesChecked.length <= previousTab)
                tabProfilesChecked = Arrays.copyOf(tabProfilesChecked, previousTab+1);
            
            if(!tabProfilesChecked[previousTab] &&
                    pf.getProfiles(gameID).length > 0)
            {
                tabProfilesChecked[previousTab] = true;
                return IOHelper.checkForProfileDirChanges(gameID);
            }
        }
        return false;
    }

    /**
     * Prompts the user for valid profile name, and then uses the name to create
     * a new profile.
     */
    private void createNewProfile(){
        // Create a new profile
        String name = JOptionPane.showInputDialog(this, "Profile Name?",
                "Create New Profile", JOptionPane.QUESTION_MESSAGE);
        if(name != null){
            // Validate the directory
            String dir = name.replaceAll("[^a-zA-Z0-9]", "");
            
            if(dir.length() == 0){
                JOptionPane.showMessageDialog(this,
                        "Invalid profile name provided.\nProfile names must contain at least one alphanumeric character.",
                        "Invalid name provided",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            if(dir.length() > 10)
                dir = dir.substring(0, 10);
            
            for(int x=1; pf.profileDirExists(dir, gameID); x++){
                if(x == 1)
                    dir += x;
                else
                    dir = dir.substring(0, dir.length()-1) + x;
            }

            // Add the profile and update the profile list
            pf.add(name, dir, gameID);

            updateProfileList();
        }
    }
    
    /** Creates a desktop shortcut for the currently selected profile. */
    private void createShortcut(){
        // Get the profile
        Profile p = (Profile) profileList.getSelectedValue();
        
        try {
            // Try to create the shortcut
            IOHelper.createShortcut(p);

            infoTxt.setText("Shortcut created");

        } catch(Exception ex){
            Main.handleException("Unable to create shortcut", ex, Main.WARN_LEVEL);
        }
    }
    
    /** Deactivates the profiles for the currently selected games. */
    private void deactivateProfiles(){
        if( JOptionPane.showConfirmDialog(this,
                "Are you sure that you wish to deactivate the profiles for this game?",
                "Deactivate Profiles",
                JOptionPane.YES_NO_OPTION)
                == JOptionPane.YES_OPTION )
        {
            GameFactory.getGameFromID(gameID).deactivateProfiles();
            updateProfileList();
            setProfileIsSelected(false);
        }
    }
    
    /** Deletes the current custom game. */
    private void deleteCustomGame(){
        if(JOptionPane.showConfirmDialog(this,
                "Are you sure that you want to delete this game?",
                "Delete Game",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            // Remove the profiles
            Profile[] profiles = pf.getProfiles(gameID);
            for(int i=0; i<profiles.length; i++){
                pf.remove(profiles[i]);
            }
            
            // Remove the game
            GameFactory.removeCustomGame(gameID);

            // Rebuild the tabs
            tabPane.setSelectedIndex(0);
            buildTabs();
        }
    }
    
    /** Deletes the currently selected profile. */
    private void deleteProfile(){
        // Delete the currently selected profile
        Profile p = (Profile) profileList.getSelectedValue();

        if(JOptionPane.showConfirmDialog(this,
                "Are you sure that you wish to delete this profile (" + p.getName() + ")?",
                "Delete Profile",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            if(JOptionPane.showConfirmDialog(this,
                    "Would you like to delete the saved games also?\n\nThis action can not be undone.",
                    "Delete Files",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
            {
                // Delete the files
                IOHelper.deleteProfileDir(p);
            }
            
            // Delete the profile and remove it from the list.
            pf.remove(p);
            profileListModel.removeElementAt(
                    profileList.getSelectedIndex());
            
            // Indicate that no profile is selected.
            setProfileIsSelected(false);
            
            // Enabled/disable the export profiles buttons as needed
            exportProfilesMenuItem.setEnabled( !profileListModel.isEmpty());
        }
    }
    
    /** Saves the programs state and then exits. */
    private void exitProgram(){
        this.setVisible(false);
        
        // Save and exit
        saveState();
        
        Main.closeErrorLog();
        this.dispose();
    }
    
    private void exportImport(boolean isExport, boolean isProfiles){
        if(xmlChooser == null){
            xmlChooser = new JFileChooser();
            xmlChooser.setFileFilter(new GenericFileFilter(new String[] {"xml"}, "xml"));
        }
        
        if(isExport){
            if(xmlChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION){
                File file = xmlChooser.getSelectedFile();

                String fName = file.getName();
                if( !fName.contains(".") || 
                        !fName.substring(fName.lastIndexOf('.')).equalsIgnoreCase(".xml"))
                    fName += ".xml";

                String out = file.getParent() + File.separator + fName;
                
                if(isProfiles){
                    XMLHelper.ProfilesToXML(pf.getProfiles(gameID), out);
                } else {
                    CustomGame[] g = {(CustomGame) GameFactory.getGameFromID(gameID)};
            
                    XMLHelper.GamesToXML(g, out);
                }

                infoTxt.setText("Export complete.");
            }
        } else {
            if(xmlChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                if(isProfiles){
                    Profile[] profiles = XMLHelper.ProfilesFromXML(xmlChooser.getSelectedFile().getAbsolutePath());
                    if(profiles == null || profiles.length == 0){
                        infoTxt.setText("No profiles imported.");
                        return;
                    } else {
                        pf.addAll(profiles, gameID);
                        updateProfileList();
                    }
                } else {
                    CustomGame[] games = XMLHelper.GamesFromXML(xmlChooser.getSelectedFile().getAbsolutePath());
                    if(games == null || games.length == 0){
                        infoTxt.setText("No games imported.");
                        return;
                    } else {
                        GameFactory.addCustomGames(games);
                        buildTabs();
                    }
                }
                
                infoTxt.setText("Import complete.");
            }
        }
    }
    
    /** Signals that a profile backup has completed, updates the GUI to reflect this. */
    public void finishBackupProfile(){
        progressBar.setVisible(false);
        
        if( !profileList.isSelectionEmpty())
            backupProfileMenuItem.setEnabled(true);
        
        infoTxt.setText("Backup complete");
    }
    
    private String getSelectedXMLFile(){
        File file = xmlChooser.getSelectedFile();

        String fName = file.getName();
        if( !fName.contains(".") || 
                !fName.substring(fName.lastIndexOf('.')).equalsIgnoreCase(".xml"))
            fName += ".xml";


        return file.getParent() + File.separator + fName;
    }
    
    /** Launches the game using the currently selected profile. */
    private void launchGame(){
        // Get the game and profile
        Profile p = (Profile) profileList.getSelectedValue();
        Game g = GameFactory.getGameFromID(gameID);
        
        // Activate
        if(g.activateProfile( p )){

            // Save the state
            saveState();

            try {
                // Launch the game
                IOHelper.startProgram( g.getExe() );

                // Exit if needed
                if( Boolean.parseBoolean(Config.get(Config.Key.exit_on_launch)) )
                    this.dispose();

            } catch(java.io.FileNotFoundException fnfe){
                Main.handleException("The games executable wasn't found.\nMake sure that the correct executable is specified in the settings window.",
                        fnfe, Main.WARN_LEVEL);
            }
        }
    }
    
    /** Saves the programs current state. */
    private void saveState(){
        Config.setPrivateProperty(Config.GUI_HEIGHT, Integer.toString(this.getHeight()));
        Config.setPrivateProperty(Config.GUI_WIDTH, Integer.toString(this.getWidth()));
        Config.setPrivateProperty(Config.GUI_X_LOCATION, Integer.toString(this.getX()));
        Config.setPrivateProperty(Config.GUI_Y_LOCATION, Integer.toString(this.getY()));
        
        if( Boolean.parseBoolean(Config.get(Config.Key.start_in_last_tab)) )
            Config.set( Config.Key.start_tab, Byte.toString(gameID) );
        
        pf.saveProfiles();
        Config.saveConfig();
    }
    
    /**
     * Sets the buttons and menu items to the correct state for a custom game.
     * @param enabled If the custom game buttons should be enabled.
     */
    private void setCustomGame(boolean enabled){
        if(editGameMenuItem.isEnabled() != enabled){
            editGameMenuItem.setEnabled(enabled);
            exportGameMenuItem.setEnabled(enabled);
            deleteGameMenuItem.setEnabled(enabled);
        }
    }
    
    /**
     * Sets the double click actions to perform the correct action based on
     * the configuration settings.
     */
    private void setDoubleClickActions(){
        dbIconActivates = Config.get(Config.Key.double_click_icon)
                .equals(Config.DB_CLICK_ACTIVATE);
        
        // Set to rename by default
        String textAction = Config.get(Config.Key.double_click_name);
        
        if(textAction.equals(Config.DB_CLICK_ACTIVATE))
            // Activate action
            dbTextAction = 1;
        else if(textAction.equals(Config.DB_CLICK_LAUNCH))
            // Launch action
            dbTextAction = 2;
        else
            // Rename, default action
            dbTextAction = 0;
    }
    
    /**
     * Updates the UI to correctly display for a profile being selected.<br/>
     * <br/>
     * This means enabling/disabled buttons and menu items and updateing the
     * profile image area.
     * @param yes True if the UI should be updated to reflect that a profile has
     * been selected, False if the UI should be updated to reflect that no
     * profile is selected.
     */
    private void setProfileIsSelected(boolean yes){
        // Enable/Disable buttons and menu items as needed
        if( launchGameBtn.isEnabled() != yes )
        {
            launchGameBtn.setEnabled(yes);
            launchMenuItem.setEnabled(yes);
            
            // Enable the buttons in the profile menu
            activateProfileMenuItem.setEnabled(yes);
            chngeImgMenuItem.setEnabled(yes);
            deleteProfileMenuItem.setEnabled(yes);
            editProfileMenuItem.setEnabled(yes);
            makeShortcutMenuItem.setEnabled(yes);
            
            // Enable other buttons
            backupProfileMenuItem.setEnabled(yes);
        }
        
        // Update the profile image as needed
        if(yes){
            // Set the profile image
            Profile p = (Profile) profileList.getSelectedValue();
            profileImage.setText("");
            
            if(p.getImage() == null || p.getImage().isEmpty()){
                profileImage.setIcon(defaultProfileIcon);
            } else {
                profileImage.setIcon(new ImageIcon(p.getImage()));
            }
        } else {
            profileImage.setIcon(null);
            profileImage.setText("Select a Profile");
        }
    }
    
    @Override
    public void setVisible(boolean b){
        super.setVisible(b);
        
        // Create the profiles checked array
        if(b && tabProfilesChecked == null){
            tabProfilesChecked = new boolean[GameFactory.getAllGameIds().length];
            Arrays.fill(tabProfilesChecked, false);

            if(checkForProfileDirChanges())
                updateProfileList();
        }
    }
    
    /** Displays the about box JDialog. */
    private void showAboutBox(){
        new AboutBox(this).setVisible(true);
    }
    
    /**
     * Displays the ConfigGUI and updates the main GUI to reflect any changes in
     * configuration
     */
    private void showConfig(){
        new ConfigGUI(this).setVisible(true);
        
        // Rebuild the tabs in-case they have been edited through the config.
        buildTabs();
        
        // Recheck the double click action
        setDoubleClickActions();
    }
    
    /**
     * Shows the Edit Game dialog.
     * @param editing True if the dialog is editing a current custom game, if
     * false then the dialog is adding a new game.
     */
    private void showEditGame(boolean editing){
        if(editing){
            new EditGame(this, (CustomGame) GameFactory.getGameFromID(gameID)).setVisible(true);
            
            // Update the game tab
            Game g = GameFactory.getGameFromID(gameID);
            tabPane.setTitleAt(previousTab, g.getName());
            tabPane.setIconAt(previousTab, g.getIcon());
        } else {
            new EditGame(this).setVisible(true);
            
            // Rebuild the tabs in-case of a new game
            buildTabs();
        }
    }
    
    /** Displays the edit profile JDialog and then updates the profile as needed. */
    private void showEditProfile(){
        Profile p = (Profile) profileList.getSelectedValue();
        String previousImg = p.getImage();
        
        new EditProfile(this, p).setVisible(true);
        
        // Update the image as needed
        if( p.getImage() == null ){
            profileImage.setIcon(defaultProfileIcon);
        } else {
            if(previousImg != null && p.getImage().equals(previousImg))
                return;
            
            if(p.getImage().isEmpty())
                profileImage.setIcon(defaultProfileIcon);
            else
                profileImage.setIcon(new ImageIcon(p.getImage()));
        }
    }
    
    /** Displays the HelpSystem JFrame. */
    private void showHelp(){
        new com.chockly.helpsystem.HelpFrame("./lib/help_docs/").setVisible(true);
    }
    
    private void showRenamePopup(){
        int index = profileList.getSelectedIndex();
        Profile p = (Profile) profileList.getModel().getElementAt(index); 
        popupTextField.setText(p.getName());
        popupTextField.setPreferredSize(
                new java.awt.Dimension(profileList.getWidth()-16, 18));

        // Get the x y screen cordinates of the selected profile
        java.awt.Point point = profileList.getCellBounds(index, index).getLocation();
        javax.swing.SwingUtilities.convertPointToScreen(point, profileList);

        // Create the popup
        currentPopup = javax.swing.PopupFactory.getSharedInstance()
                .getPopup(this, popupTextField, point.x+16, point.y);
        currentPopup.show();

        // Focus on the popupText and select all.
        popupTextField.requestFocusInWindow();
        popupTextField.setSelectionStart(0);
        popupTextField.setSelectionEnd(p.getName().length());

        popupOn = true;
    }
    
    private void progressBarUpdate(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            if (progress == 100)
                progressBar.setIndeterminate(true);
            else
                progressBar.setValue(progress);
        }
    }
    
    /**
     * Renames the currently selected profile's name based on what is in the
     * popupTextField.
     */ 
    private void renameProfile(){
        // Update the profile with the new name
        Profile p = (Profile) profileList.getSelectedValue();
        
        String newName = popupTextField.getText().trim();
        
        if( !newName.isEmpty())
            p.setName(newName);
        
        currentPopup.hide();
    }

    private void uninstall() {
        if(JOptionPane.showConfirmDialog(this,
                "Are you sure that you wish to begin the uninstall process?\n\n"
                + "Clicking yes will open the uninstall manager.",
                "Uninstall",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
        {
            dispose();
            Uninstall.uninstall(activeGames, this);
        }
    }

    /** Rebuilds the profileListModel. */
    private void updateProfileList(){
        // Get the profiles
        Profile[] p = pf.getProfiles(gameID);
        
        // Sort the profiles
        Arrays.sort(p);
        
        // Add them to the profileListModel
        profileListModel.removeAllElements();
        for(int x=0; x<p.length; x++){
            profileListModel.addElement(p[x]);

            // Auto select the active profile
            if(p[x].isActive())
                profileList.setSelectedIndex(x);
        }
        
        // Enabled/disable the export profiles buttons as needed
        exportProfilesMenuItem.setEnabled(p.length > 0);
    }
}
