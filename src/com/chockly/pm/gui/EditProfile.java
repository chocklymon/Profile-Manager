/* Profile Manager
 * Copyright (C) 2012 Curtis Oakley
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.chockly.pm.gui;

import com.chockly.pm.Profile;
import com.chockly.pm.ProfileFactory;
import com.chockly.pm.games.Game;
import com.chockly.pm.games.GameFactory;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.JOptionPane;

/**
 * Displays an EditProfile dialog.
 * @author Curtis Oakley
 */
public class EditProfile extends javax.swing.JDialog implements ActionListener {

    /** Creates new form EditProfile */
    public EditProfile(java.awt.Frame parent, Profile profile) {
        super(parent, true);
        
        this.profile = profile;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nameLabel = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        idLabel = new javax.swing.JLabel();
        imgLabel = new javax.swing.JLabel();
        imgTxt = new javax.swing.JTextField();
        selectImgBtn = new javax.swing.JButton();
        editDirCheckBox = new javax.swing.JCheckBox();
        dirLabel = new javax.swing.JLabel();
        dirTxt = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Profile");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/pencil.png")).getImage());
        setLocationByPlatform(true);
        setResizable(false);

        nameLabel.setText("Name:");

        nameTxt.setText(profile.getName());

        idLabel.setText("ID: " + profile.getID());

        imgLabel.setText("Image:");

        imgTxt.setText(profile.getImage());

        selectImgBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chockly/pm/resources/blue-folder-search-result.png"))); // NOI18N
        selectImgBtn.addActionListener(this);

        editDirCheckBox.setText("Rename Directory");
        editDirCheckBox.addActionListener(this);

        dirLabel.setText("Directory:");

        dirTxt.setText(profile.getSaveDir());
        dirTxt.setEnabled(false);

        saveBtn.setText("Ok");
        saveBtn.addActionListener(this);

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(editDirCheckBox)
                            .addContainerGap(282, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(dirLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(dirTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(nameLabel)
                                        .addComponent(imgLabel))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(nameTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                                        .addComponent(imgTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(idLabel)
                                .addComponent(selectImgBtn))
                            .addContainerGap()))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(imgLabel)
                        .addComponent(imgTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(selectImgBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editDirCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dirLabel)
                    .addComponent(dirTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(saveBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelBtn;
    private javax.swing.JLabel dirLabel;
    private javax.swing.JTextField dirTxt;
    private javax.swing.JCheckBox editDirCheckBox;
    private javax.swing.JLabel idLabel;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JTextField imgTxt;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton selectImgBtn;
    // End of variables declaration//GEN-END:variables

    private Profile profile;
    
    @Override
    public void actionPerformed(ActionEvent evt) {
        Object source = evt.getSource();
        if(source.equals(cancelBtn)){
            this.dispose();
        } else if(source.equals(editDirCheckBox)){
            toggleEditDir();
        } else if(source.equals(saveBtn)){
            saveAndExit();
        } else if(source.equals(selectImgBtn)){
            changeProfileImage();
        }
    }
    
    private void changeProfileImage(){
        ImageFileChooser fc = new ImageFileChooser(profile.getImage());
        
        int result = fc.showOpenDialog(this);
        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            imgTxt.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }
    
    /** Saves the changes to the Profile and closes the dialog. */
    private void saveAndExit(){
        if(editDirCheckBox.isSelected()){
            if( !dirTxt.getText().equals(profile.getSaveDir())){
                String dir = dirTxt.getText();
                if(ProfileFactory.profileDirExists(dir, profile.getGameID())){
                    JOptionPane.showMessageDialog(this,
                            "The directory '" + dir + "'\n is already in use by another profile!",
                            "Profile Directory Exists",
                            JOptionPane.WARNING_MESSAGE);
                    return;
                } else {
                    // Rename the profile folder directory
                    Game game = GameFactory.getGameFromID(profile.getGameID());
                    
                    if( !game.usesIni() && profile.isActive()){
                        // If the profiles are stored externally and the profile is active don't rename
                        profile.setSaveDir(dir);
                    } else {

                        String saveDir = game.getDir() + game.getSave() + File.separator;

                        File oldDir = new File(saveDir + profile.getSaveDir());
                        if(oldDir.renameTo(new File(saveDir + dir))){
                            profile.setSaveDir(dir);

                            // If the profile is active re-activate it so that it points to the correct directory
                            if(profile.isActive())
                                game.activateProfile(profile);
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "Unable to change the profile's save game directory.",
                                    "Error",
                                    JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
                }
            }
        }
        
        if( !nameTxt.getText().equals(profile.getName()))
            profile.setName(nameTxt.getText());
        
        if( !imgTxt.getText().equals(profile.getImage()))
            profile.setImage(imgTxt.getText());
        
        ProfileFactory.saveProfiles();
        
        this.dispose();
    }
    
    private void toggleEditDir(){
        if(editDirCheckBox.isSelected()){
            if(JOptionPane.showConfirmDialog(this,
                    "Are you sure that want to edit the profile's save directory?",
                    "Edit Save Directory",
                    JOptionPane.YES_NO_OPTION)
                    == JOptionPane.YES_OPTION)
            {
                dirTxt.setEnabled(true);
            } else {
                editDirCheckBox.setSelected(false);
            }
        } else if(dirTxt.isEnabled()){
            dirTxt.setEnabled(false);
        }
    }
}
